
Frequencimetro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000242  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000242  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800106  00800106  000002dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000300  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d6  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d8  00000000  00000000  00000812  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000009ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024a  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000122  00000000  00000000  00000ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_12>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	40 79       	andi	r20, 0x90	; 144
  6a:	24 30       	cpi	r18, 0x04	; 4
  6c:	19 12       	cpse	r1, r25
  6e:	02 78       	andi	r16, 0x82	; 130
  70:	00 18       	sub	r0, r0
  72:	08 03       	fmul	r16, r16
  74:	46 21       	and	r20, r6
  76:	06 0e       	add	r0, r22

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	e2 e4       	ldi	r30, 0x42	; 66
  8c:	f2 e0       	ldi	r31, 0x02	; 2
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	a6 e0       	ldi	r26, 0x06	; 6
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	ac 30       	cpi	r26, 0x0C	; 12
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  ae:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <main>:
volatile uint8_t selection = 0;
volatile uint8_t tempo[6]={0,0,0,0,0};
//volatile uint8_t segs[2]={0,0};
//volatile uint8_t mins[2]={0,0};
//volatile uint8_t hrs[2]={0,0};
int main(){
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	00 d0       	rcall	.+0      	; 0xbc <main+0x6>
  bc:	00 d0       	rcall	.+0      	; 0xbe <main+0x8>
  be:	00 d0       	rcall	.+0      	; 0xc0 <main+0xa>
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62

	uint8_t PCs[6] = {PC0,PC1,PC2,PC3,PC4,PC5};
  c4:	86 e0       	ldi	r24, 0x06	; 6
  c6:	e0 e0       	ldi	r30, 0x00	; 0
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	de 01       	movw	r26, r28
  cc:	11 96       	adiw	r26, 0x01	; 1
  ce:	01 90       	ld	r0, Z+
  d0:	0d 92       	st	X+, r0
  d2:	8a 95       	dec	r24
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x18>
	uint8_t i=0;
	
	TCCR1A |= (1 << COM1A0);
  d6:	e0 e8       	ldi	r30, 0x80	; 128
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12 | 1 << WGM12 ); //Modo CTC
  e0:	e1 e8       	ldi	r30, 0x81	; 129
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	8c 60       	ori	r24, 0x0C	; 12
  e8:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1B); // Enable CTC interrupt
  ea:	ef e6       	ldi	r30, 0x6F	; 111
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	80 83       	st	Z, r24
	OCR1A   = 0x0001;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 89 00 	sts	0x0089, r25
  fc:	80 93 88 00 	sts	0x0088, r24
	sei(); //  Enable global interrupts
 100:	78 94       	sei
	
	 
    
    
    /* Acesso por strutura  */
    GPIO_C->DDR = (1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3) | (1 << PC4) | (1 << PC5);
 102:	8f e3       	ldi	r24, 0x3F	; 63
 104:	87 b9       	out	0x07, r24	; 7
	GPIO_D->DDR = (1 << PD0) | (1 << PD1) | (1 << PD2) | (1 << PD3) | (1 << PD4) | (1 << PD5) | (1 << PD6) | (1 << PD7);
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	8a b9       	out	0x0a, r24	; 10
    


	for(;;){
		for(i=0; i<6; i++)
 10a:	60 e0       	ldi	r22, 0x00	; 0
		{
			GPIO_D->PORT = pgm_read_byte(&tabela[tempo[i]]);
			GPIO_SetBit(GPIO_C, PCs[i]);
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	30 e0       	ldi	r19, 0x00	; 0
	GPIO_D->DDR = (1 << PD0) | (1 << PD1) | (1 << PD2) | (1 << PD3) | (1 << PD4) | (1 << PD5) | (1 << PD6) | (1 << PD7);
    


	for(;;){
		for(i=0; i<6; i++)
 110:	a0 e0       	ldi	r26, 0x00	; 0
		{
			GPIO_D->PORT = pgm_read_byte(&tabela[tempo[i]]);
 112:	86 2f       	mov	r24, r22
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	ea 5f       	subi	r30, 0xFA	; 250
 11a:	fe 4f       	sbci	r31, 0xFE	; 254
 11c:	e0 81       	ld	r30, Z
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	e8 59       	subi	r30, 0x98	; 152
 122:	ff 4f       	sbci	r31, 0xFF	; 255
 124:	e4 91       	lpm	r30, Z
 126:	eb b9       	out	0x0b, r30	; 11
			GPIO_SetBit(GPIO_C, PCs[i]);
 128:	78 b1       	in	r23, 0x08	; 8
 12a:	e1 e0       	ldi	r30, 0x01	; 1
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	ec 0f       	add	r30, r28
 130:	fd 1f       	adc	r31, r29
 132:	e8 0f       	add	r30, r24
 134:	f9 1f       	adc	r31, r25
 136:	a9 01       	movw	r20, r18
 138:	00 80       	ld	r0, Z
 13a:	02 c0       	rjmp	.+4      	; 0x140 <main+0x8a>
 13c:	44 0f       	add	r20, r20
 13e:	55 1f       	adc	r21, r21
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <main+0x86>
 144:	47 2b       	or	r20, r23
 146:	48 b9       	out	0x08, r20	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	ef e1       	ldi	r30, 0x1F	; 31
 14a:	fe e4       	ldi	r31, 0x4E	; 78
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x96>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x9c>
 152:	00 00       	nop
			_delay_ms(5);
			GPIO_ClrBit(GPIO_C, PCs[i]);
 154:	48 b1       	in	r20, 0x08	; 8
 156:	e1 e0       	ldi	r30, 0x01	; 1
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	ec 0f       	add	r30, r28
 15c:	fd 1f       	adc	r31, r29
 15e:	e8 0f       	add	r30, r24
 160:	f9 1f       	adc	r31, r25
 162:	c9 01       	movw	r24, r18
 164:	00 80       	ld	r0, Z
 166:	02 c0       	rjmp	.+4      	; 0x16c <main+0xb6>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <main+0xb2>
 170:	80 95       	com	r24
 172:	84 23       	and	r24, r20
 174:	88 b9       	out	0x08, r24	; 8
 176:	8f e1       	ldi	r24, 0x1F	; 31
 178:	9e e4       	ldi	r25, 0x4E	; 78
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0xc4>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0xca>
 180:	00 00       	nop
	GPIO_D->DDR = (1 << PD0) | (1 << PD1) | (1 << PD2) | (1 << PD3) | (1 << PD4) | (1 << PD5) | (1 << PD6) | (1 << PD7);
    


	for(;;){
		for(i=0; i<6; i++)
 182:	6f 5f       	subi	r22, 0xFF	; 255
 184:	66 30       	cpi	r22, 0x06	; 6
 186:	28 f2       	brcs	.-118    	; 0x112 <main+0x5c>
 188:	6a 2f       	mov	r22, r26
 18a:	c3 cf       	rjmp	.-122    	; 0x112 <main+0x5c>

0000018c <__vector_12>:

	return 0;
}

ISR(TIMER1_COMPB_vect)
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	8f 93       	push	r24
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
	if(GPIO_B->PIN > 0)  
 19c:	83 b1       	in	r24, 0x03	; 3
 19e:	88 23       	and	r24, r24
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <__vector_12+0x18>
 1a2:	45 c0       	rjmp	.+138    	; 0x22e <__vector_12+0xa2>
	{
		tempo[5]++;
 1a4:	eb e0       	ldi	r30, 0x0B	; 11
 1a6:	f1 e0       	ldi	r31, 0x01	; 1
 1a8:	80 81       	ld	r24, Z
 1aa:	8f 5f       	subi	r24, 0xFF	; 255
 1ac:	80 83       	st	Z, r24
		if(tempo[5]>9)
 1ae:	80 81       	ld	r24, Z
 1b0:	8a 30       	cpi	r24, 0x0A	; 10
 1b2:	e8 f1       	brcs	.+122    	; 0x22e <__vector_12+0xa2>
		{
			tempo[5]=0;
 1b4:	10 92 0b 01 	sts	0x010B, r1
			tempo[4]++;
 1b8:	ea e0       	ldi	r30, 0x0A	; 10
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	80 81       	ld	r24, Z
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	80 83       	st	Z, r24
			
			if(tempo[4]>5)
 1c2:	80 81       	ld	r24, Z
 1c4:	86 30       	cpi	r24, 0x06	; 6
 1c6:	98 f1       	brcs	.+102    	; 0x22e <__vector_12+0xa2>
			{
				tempo[4]=0;
 1c8:	10 92 0a 01 	sts	0x010A, r1
				tempo[3]++;
 1cc:	e9 e0       	ldi	r30, 0x09	; 9
 1ce:	f1 e0       	ldi	r31, 0x01	; 1
 1d0:	80 81       	ld	r24, Z
 1d2:	8f 5f       	subi	r24, 0xFF	; 255
 1d4:	80 83       	st	Z, r24
				if(tempo[3]>9)
 1d6:	80 81       	ld	r24, Z
 1d8:	8a 30       	cpi	r24, 0x0A	; 10
 1da:	48 f1       	brcs	.+82     	; 0x22e <__vector_12+0xa2>
				{
					tempo[3]=0;
 1dc:	10 92 09 01 	sts	0x0109, r1
					tempo[2]++;
 1e0:	e8 e0       	ldi	r30, 0x08	; 8
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	80 81       	ld	r24, Z
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	80 83       	st	Z, r24
					if(tempo[2]>5)
 1ea:	80 81       	ld	r24, Z
 1ec:	86 30       	cpi	r24, 0x06	; 6
 1ee:	f8 f0       	brcs	.+62     	; 0x22e <__vector_12+0xa2>
					{
						tempo[2]=0;
 1f0:	10 92 08 01 	sts	0x0108, r1
						tempo[1]++;
 1f4:	e7 e0       	ldi	r30, 0x07	; 7
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	80 81       	ld	r24, Z
 1fa:	8f 5f       	subi	r24, 0xFF	; 255
 1fc:	80 83       	st	Z, r24
						if(tempo[0]==2 && tempo[1]>3)
 1fe:	80 91 06 01 	lds	r24, 0x0106
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	49 f4       	brne	.+18     	; 0x218 <__vector_12+0x8c>
 206:	80 91 07 01 	lds	r24, 0x0107
 20a:	84 30       	cpi	r24, 0x04	; 4
 20c:	28 f0       	brcs	.+10     	; 0x218 <__vector_12+0x8c>
						{
							tempo[0]=0;
 20e:	10 92 06 01 	sts	0x0106, r1
							tempo[1]=0;
 212:	10 92 07 01 	sts	0x0107, r1
 216:	0b c0       	rjmp	.+22     	; 0x22e <__vector_12+0xa2>
						}
						else
						if(tempo[1]>9)
 218:	80 91 07 01 	lds	r24, 0x0107
 21c:	8a 30       	cpi	r24, 0x0A	; 10
 21e:	38 f0       	brcs	.+14     	; 0x22e <__vector_12+0xa2>
						{
							tempo[1]=0;
 220:	10 92 07 01 	sts	0x0107, r1
							tempo[0]++;
 224:	e6 e0       	ldi	r30, 0x06	; 6
 226:	f1 e0       	ldi	r31, 0x01	; 1
 228:	80 81       	ld	r24, Z
 22a:	8f 5f       	subi	r24, 0xFF	; 255
 22c:	80 83       	st	Z, r24
				
			}
		}
	}
	
}
 22e:	ff 91       	pop	r31
 230:	ef 91       	pop	r30
 232:	8f 91       	pop	r24
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
